%{
	#include "SymbolTable.hpp"
	#include "output.hpp"
	#include "hw5.hpp"
	#include <iostream>
	#include <cstdlib>
	#include <cassert>
	using namespace std;
	using namespace output;

	//const string& one="1";
	//const string& zero="0";

	extern int yylex();

	extern int yylineno;

	void yyerror(const char *);

	 extern symbolTable* scopes;

	bool canBeAssignedBool(types t1, types t2){
		return (t1 == t2 || (t1 == IntType && t2 == ByteType));
	}

	void inline canBeAssigned(types t1, types t2){
		bool b = canBeAssignedBool(t1,t2);
		if(!b){
			cout <<"1\n";
			output::errorMismatch(scopes->lineNum);
			exit(0);
		}
	}


%}

%token VOID
%token INT
%token BYTE
%token B
%token BOOL



%token TRUE
%token FALSE
%token RETURN
%token WHILE
%token BREAK
%token CONTINUE
%token PRECOND
%token SC
%token COMMA
%token LBRACE
%token RBRACE
%token ID
%token NUM
%token STRING

%right ASSIGN
%left OR
%left AND
%left IF
%left ELSE
%nonassoc RELOP
%left BINOPPM
%left BINOPMD
%right NOT
%left LPAREN
%left RPAREN


%%
Program: Funcs{
		scopes->existsMain();
}
;

Funcs: /*epsilon*/{}
|	FuncDecl  Funcs{

}
;


FuncDecl: FuncDeclFirst M PreConditions M FuncDeclSecond 
{ 
	scopes->popScope();
	callReturnFunc(); 

	CodeBuffer::instance().bpatch($2.getNextList(),$3.str); //jump to preconditon
    CodeBuffer::instance().bpatch($3.getTrueList(),$4.str);
    CodeBuffer::instance().bpatch($3.getFalseList(), $1.str); //jump to error label

}
;


FuncDeclFirst: RetType ID LPAREN Formals RPAREN
{
	scopes->addFunction(typeToString($1.type), $2.str, $4.func_info, $$.lineNum, true);
	$$.type = $1.type;
	$$.lineNum = $1.lineNum;
	$$.str = $2.str;
	defineFunc($2.str);	
	
	//CodeBuffer::instance().emit("0");
	$$.getNextList()=CodeBuffer::instance().makelist(jmp());
	string lbl=CodeBuffer::instance().genLabel();
	string lbldata = createPrecondString("\""+$2.str+"\"");
	CodeBuffer::instance().emit("la $t0, "+lbldata);
	CodeBuffer::instance().emit("j PreConditionLabel");
	string lbl2 = CodeBuffer::instance().genLabel();
	CodeBuffer::instance().bpatch($$.getNextList(), lbl2);
	$$.str = lbl;
}
;

FuncDeclSecond: LBRACE Statements RBRACE {
		$$.lineNum = $2.lineNum;
		$$.str = $2.str;
		CodeBuffer::instance().bpatch($2.getNextList(),CodeBuffer::instance().genLabel());
}
;

RetType: Type { $$ = $1; }

	| VOID { $$.type = VoidType; }
;

Formals: FormalsList {
	scopes->lineNum = $1.lineNum;
	$$.func_info = $1.func_info;
}

	| /*epsilon*/ {$$ = StackType(); }
;

FormalsList: FormalDecl {

	$$.func_info.insert($$.func_info.begin(), TypedVar($1.str, typeToString($1.type), $1.lineNum));
	scopes->lineNum = $1.lineNum;
	$$.lineNum = $1.lineNum;
}
	| FormalDecl COMMA FormalsList {

			$$.func_info = $3.func_info;
			$$.func_info.insert($$.func_info.begin(),TypedVar($1.str, typeToString($1.type), $1.lineNum));
			scopes->lineNum = $1.lineNum;
			$$.lineNum = $1.lineNum;
}
;


FormalDecl: Type ID {

	$$.type = $1.type;
	$$.str = $2.str;
	$$.lineNum = $2.lineNum;
	scopes->lineNum = $2.lineNum;
}
;


PreConditions: PreConditions M PreCondition{

		CodeBuffer::instance().bpatch($1.getTrueList(),$2.str);
		$$.getTrueList()=$3.getTrueList();
		$$.getFalseList()=CodeBuffer::instance().merge($1.getFalseList(), $3.getFalseList());   
		
	}
	| /*epsilon*/

//TODO: FAQ about preconditions with vars or functions
PreCondition: PRECOND LPAREN Exp RPAREN{

		$$ = $3;
		scopes->lineNum = $3.lineNum;
		if(!isTypesEqual(typeToString($3.type), "BOOL")){
			cout << "2\n";
			output::errorMismatch($$.lineNum);
			exit(0);
		}
		scopes->isPreCondLegal($3.func_info);
		scopes->scopes.back()->incPreconditions();

		//precondition that doesn't happen: exit = goto $
		$$.getFalseList() = $3.getFalseList();
	}
;

Statements: Statement{

	$$.lineNum = $1.lineNum;
	scopes->lineNum = $$.lineNum;
}

	| Statements M Statement{

		$$ = $3;
		$$.lineNum = $3.lineNum;
		scopes->lineNum = $$.lineNum;
		
		CodeBuffer::instance().bpatch($1.getNextList(), $2.str);
		//$$.getNextList() = CodeBuffer::instance().merge($1.getNextList(), $3.getNextList());
		$$.getBreakList() = CodeBuffer::instance().merge($1.getBreakList(), $3.getBreakList());
		$$.getContinueList() = CodeBuffer::instance().merge($1.getContinueList(),$3.getContinueList());
	}
;

StartScope:  /*epsilon*/ {

		$$ = StackType();
	 	scopes->addScope();
	}
;

StartWhileScope: /*epsilon*/ {

	scopes->addWhile();
}
;


Statement: StartScope LBRACE Statements RBRACE {

	scopes->popScope();
	$$.lineNum = $2.lineNum;
	}

	| Type ID SC
	{

		scopes->addVariable(typeToString($1.type), $2.str, $1.lineNum);
		$$.lineNum = $1.lineNum;
	}

	| Type ID ASSIGN Exp SC
	{
		canBeAssigned($1.type, $4.type);
		scopes->lineNum = $1.lineNum;
		scopes->addVariable(typeToString($1.type), $2.str, $1.lineNum);

		if ($1.type != BoolType) {
			allocVar($4);
			$$.str = CodeBuffer::instance().genLabel();
			CodeBuffer::instance().bpatch($4.getNextList(), $$.str);
			CodeBuffer::instance().bpatch($4.getTrueList(), $$.str);
			CodeBuffer::instance().bpatch($4.getFalseList(), $$.str);
		} else {
			string trueLabel = CodeBuffer::instance().genLabel();
			$$.regist= register_alloc->RegisterAlloc();
			//stringstream s;
			//s << "li " << reg_to_string($$.regist) << ", 1";
			//CodeBuffer::instance().emit(s.str());
			//CodeBuffer::instance().emit("subu $sp, $sp, 4");
			


			//s.clear();
			//s.str(string());
			//s << "sw " << reg_to_string($$.regist) << ", ($sp)";
			//CodeBuffer::instance().emit(s.str());
			loadImm($$.regist, "1\n");
			pushReg($$.regist);
			//$$.getNextList() = CodeBuffer::instance().makelist(CodeBuffer::instance().emit("1 j "));
			//CodeBuffer::instance().emit("1");
			$$.getNextList()= CodeBuffer::instance().makelist(jmp());
			string falseLabel = CodeBuffer::instance().genLabel();
			//s.clear();
			//s.str(string());
			//s << "li " << reg_to_string($$.regist) << ", 0";
			//CodeBuffer::instance().emit(s.str());
			loadImm($$.regist, "0");
			//CodeBuffer::instance().emit("subu $sp, $sp, 4");
			//s.clear();
			//s.str(string());
			//s << "sw " << reg_to_string($$.regist) << ", ($sp)";
			//CodeBuffer::instance().emit(s.str());
			pushReg($$.regist);
			//$$.getNextList() = CodeBuffer::instance().merge($$.getNextList(), CodeBuffer::instance().makelist(CodeBuffer::instance().emit("2 j ")));
			//CodeBuffer::instance().emit("2");
			$$.getNextList() = CodeBuffer::instance().merge($$.getNextList(), CodeBuffer::instance().makelist(jmp()));
			CodeBuffer::instance().bpatch($4.getTrueList(), trueLabel);
			CodeBuffer::instance().bpatch($4.getFalseList(), falseLabel);
			register_alloc->freeRegister($$.regist);
}
	}


	| ID ASSIGN Exp SC
	{
		if (scopes->getFunction($1.str) != NULL) {
			errorUndef(scopes->lineNum, $1.str);
			exit(0);
		}
		if(!scopes->getVariable($1.str)){
			errorUndef(scopes->lineNum, scopes->getVariable($1.str)->getId());
			exit(0);
		}
		scopes->lineNum = $1.lineNum;
		string id_type = scopes->getVariable($1.str)->getType();
		canBeAssigned(stringToType(id_type), $3.type);
		//scopes->addVariable(typeToString($1.type), $2.str, $1.lineNum);
		VariableEntry* var_entry = scopes->getVariable($1.str);
		assert(var_entry != NULL);
		if (var_entry->getType() != typeToString(BoolType)) {
			assignToVar((scopes->getVariable($1.str))->getWordOffset(), $3);
			$$.str = CodeBuffer::instance().genLabel();
			//CodeBuffer::instance().bpatch($3.getNextList(), $$.str); //Hail Mary?
			CodeBuffer::instance().bpatch($3.getTrueList(), $$.str);
			CodeBuffer::instance().bpatch($3.getFalseList(), $$.str);
		} else{
			string trueLabel = CodeBuffer::instance().genLabel();
			$$.regist= register_alloc->RegisterAlloc();
				//stringstream s;
				//s << "li " << reg_to_string($$.regist) << ", 1";
				//CodeBuffer::instance().emit(s.str());
				//s.clear();
			loadImm($$.regist, "1");
				//s.str(string());
			int offset = var_entry->getWordOffset()*(-1);
				//s << "sw " << reg_to_string($$.regist) << ", " << offset << " ($fp)";
				//CodeBuffer::instance().emit(s.str());
			pushOffset($$.regist, offset);
				//$$.getNextList() = CodeBuffer::instance().makelist(CodeBuffer::instance().emit("3 j "));
			//CodeBuffer::instance().emit("3");
			$$.getNextList() = CodeBuffer::instance().makelist(jmp());
			string falseLabel = CodeBuffer::instance().genLabel();
				//s.clear();
				//s.str(string());
				//s << "li " << reg_to_string($$.regist) << ", 0";
				//CodeBuffer::instance().emit(s.str());
			loadImm($$.regist, "0");
				//s.clear();
				//s.str(string());
				//s << "sw " << reg_to_string($$.regist) <<", " << offset << " ($fp)";
				//CodeBuffer::instance().emit(s.str());
			pushOffset($$.regist, offset);
				//$$.getNextList() = CodeBuffer::instance().merge($$.getNextList(), CodeBuffer::instance().makelist(CodeBuffer::instance().emit("4 j ")));
			//CodeBuffer::instance().emit("4");
			$$.getNextList() = CodeBuffer::instance().merge($$.getNextList(), CodeBuffer::instance().makelist(jmp()));
			CodeBuffer::instance().bpatch($4.getTrueList(), trueLabel);
			CodeBuffer::instance().bpatch($4.getFalseList(), falseLabel);
			register_alloc->freeRegister($$.regist);
		}
	}


	| Call SC {

		$$.lineNum = $2.lineNum;
		scopes->lineNum = $$.lineNum;
		register_alloc->freeRegister($1.regist);
	}

	| RETURN SC {

		$$.lineNum = $1.lineNum;
		scopes->lineNum = $$.lineNum;
		scopes->checkReturn(typeToString(VoidType), $$.lineNum);
		callReturnFunc();
	}

	| RETURN Exp SC {

		$$.lineNum = $1.lineNum;
		scopes->lineNum = $$.lineNum;
		scopes->checkReturn(typeToString($2.type), $$.lineNum);
		if (typeToString($2.type) == typeToString(BoolType)){
			string trueLabel = CodeBuffer::instance().genLabel();
			CodeBuffer::instance().emit("li $v0, 1");
			//loadImm($v0, "1");
			//CodeBuffer::instance().emit("move $sp, $fp");
    		//CodeBuffer::instance().emit("jr $ra");
    		change_frame();
			string falseLabel = CodeBuffer::instance().genLabel();
			CodeBuffer::instance().emit("li $v0, 0");
			//loadImm($v0, "0");
			//CodeBuffer::instance().emit("move $sp, $fp");
    		//CodeBuffer::instance().emit("jr $ra");
    		change_frame();
			CodeBuffer::instance().bpatch($2.getTrueList(), trueLabel);
			CodeBuffer::instance().bpatch($2.getFalseList(), falseLabel);
		} else {
			returnValueFromFunc($2);
			callReturnFunc();
			$$.str = CodeBuffer::instance().genLabel();
			CodeBuffer::instance().bpatch($2.getTrueList(), $$.str);
			CodeBuffer::instance().bpatch($2.getFalseList(), $$.str);
		}
	}

	| IfScope %prec IF{
		$$.getBreakList() = $1.getBreakList();
        $$.getNextList() = CodeBuffer::instance().merge($1.getNextList(), $1.getFalseList());
		$$.getContinueList() = $1.getContinueList();

	}

	| IfScope ElseScope {
		CodeBuffer::instance().bpatch($1.getFalseList(), $2.str);
        $$.getNextList() = CodeBuffer::instance().merge($1.getNextList(), $2.getNextList());
        $$.getBreakList() = CodeBuffer::instance().merge($1.getBreakList(), $2.getBreakList());
		$$.getContinueList() = CodeBuffer::instance().merge($1.getContinueList(), $2.getContinueList());
	}

	| StartWhileScope WHILE LPAREN M Exp RPAREN M Statement N{

		scopes->popScope();
		if ($5.type != BoolType) {
			cout << "3\n";
			output::errorMismatch($2.lineNum);
			exit(0);
		}
		CodeBuffer::instance().bpatch($8.getContinueList(), $4.str);
		CodeBuffer::instance().bpatch($8.getNextList(), $4.str);
		CodeBuffer::instance().bpatch($9.getNextList(), $4.str);
		CodeBuffer::instance().bpatch($5.getTrueList(), $7.str);
		$$.getNextList() = CodeBuffer::instance().merge($5.getFalseList(), $8.getBreakList());
		CodeBuffer::instance().bpatch($$.getNextList(), $9.str);

		register_alloc->freeRegister($5.regist);
	}

	| BREAK SC
	{
		scopes->isBreakAllowed($1.lineNum);
		//$$.getBreakList() = CodeBuffer::instance().makelist(CodeBuffer::instance().emit("5 j "));
		//CodeBuffer::instance().emit("5");
		$$.getBreakList() = CodeBuffer::instance().makelist(jmp());
	}
	| CONTINUE SC
	{
		scopes->isContinueAllowed($1.lineNum);
		//$$.getContinueList() = CodeBuffer::instance().makelist(CodeBuffer::instance().emit("6 j "));
		//CodeBuffer::instance().emit("6");
		$$.getContinueList() = CodeBuffer::instance().makelist(jmp());
	}
;
IfScope: StartScope IF LPAREN Exp RPAREN M Statement M {

		scopes->popScope();
		$$.lineNum = $2.lineNum;
		scopes->lineNum = $2.lineNum;
		if ($4.type != BoolType) {
			//cout << "4\n";
			output::errorMismatch($2.lineNum);
			exit(0);
		}
		CodeBuffer::instance().bpatch($4.getTrueList(), $6.str);
    	$$.getNextList() = $7.getNextList();
    	$$.getFalseList() = $4.getFalseList();
    	$$.getBreakList() = $7.getBreakList();
    	$$.getContinueList() = $7.getContinueList();

		CodeBuffer::instance().bpatch($$.getBreakList(), $8.str);
		register_alloc->freeRegister($4.regist);
	}
;

ElseScope: ELSE N M StartScope Statement{
		scopes->popScope();
		$$.lineNum = $5.lineNum;
		scopes->lineNum = $$.lineNum;
		$$.getBreakList() = $5.getBreakList();
		$$.getContinueList() = $5.getContinueList();
		$$.getNextList() = CodeBuffer::instance().merge($2.getNextList(), $5.getNextList());
		$$.str = $3.str; 
	}
;

Call: ID LPAREN ExpList RPAREN {

		string ret_type = scopes->callFunction($1.str, $3.func_info, $1.lineNum);
		$1.type = stringToType(ret_type);
		$$ = $1;
		CodeBuffer::instance().bpatch($3.getNextList(), CodeBuffer::instance().genLabel());
		$$.regist = callFunc($1.str, $3);
	}

	| ID LPAREN RPAREN {

		vector<TypedVar> vec;
		string ret_type = scopes->callFunction($1.str, vec, $1.lineNum);
		$1.type = stringToType(ret_type);
		$$ = $1;
		$$.regist = callFunc($1.str, StackType());
	}
;


ExpList: Exp {

		$$ = $1;
		$$.func_info.insert($$.func_info.begin(), TypedVar( $1.str, typeToString($1.type), $1.lineNum));

		if(typeToString($1.type) == typeToString(BoolType)){
	        $$.regist = register_alloc->RegisterAlloc();
	        CodeBuffer::instance().bpatch($1.getTrueList(), CodeBuffer::instance().genLabel());
	        //CodeBuffer::instance().emit("li " + reg_to_string($$.regist) + ", 1");
	        loadImm($$.regist, "1");
	        //vector<int> bpass = CodeBuffer::instance().makelist(CodeBuffer::instance().emit("j "));
	        //CodeBuffer::instance().emit("7");
	        vector<int> f_bypass = CodeBuffer::instance().makelist(jmp()); //j7
	        CodeBuffer::instance().bpatch($1.getFalseList(), CodeBuffer::instance().genLabel());
	        //CodeBuffer::instance().emit("li " + reg_to_string($$.regist) + ", 0");
	        loadImm($$.regist, "0");
	        CodeBuffer::instance().bpatch(f_bypass, CodeBuffer::instance().genLabel());
	    }
	}

	| Exp COMMA ExpList{

		$$ = $1;
		$$.func_info = $3.func_info;
		$$.func_info.insert($$.func_info.begin(), TypedVar( $1.str, typeToString($1.type), $1.lineNum));

		if(typeToString($1.type) == typeToString(BoolType)){
	        $$.regist = register_alloc->RegisterAlloc();
	        CodeBuffer::instance().bpatch($1.getTrueList(), CodeBuffer::instance().genLabel());
	   
	        //CodeBuffer::instance().emit("li " + reg_to_string($$.regist) + ", 1");
	        loadImm($$.regist, "1");
	        //vector<int> bpass = CodeBuffer::instance().makelist(CodeBuffer::instance().emit("j "));
	        //CodeBuffer::instance().emit("8");
	        vector<int> f_bypass = CodeBuffer::instance().makelist(jmp());
	        CodeBuffer::instance().bpatch($1.getFalseList(), CodeBuffer::instance().genLabel());
	        //CodeBuffer::instance().emit("li " + reg_to_string($$.regist) + ", 0");
	        loadImm($$.regist, "0");
	        CodeBuffer::instance().bpatch(f_bypass, CodeBuffer::instance().genLabel());
	    }
	}
;


Type: INT {  $$ = $1; scopes->lineNum = $$.lineNum; }

	| BYTE {  $$ = $1; scopes->lineNum = $$.lineNum; }

	| BOOL {  $$ = $1; scopes->lineNum = $$.lineNum; }
;

Exp: LPAREN Exp RPAREN {  $$ = $2; scopes->lineNum = $$.lineNum = $3.lineNum; }

	| Exp BINOPPM Exp {

		$$.lineNum = $1.lineNum;
		if (($1.type != IntType && $1.type != ByteType) || ($3.type != IntType && $3.type != ByteType)) {
			cout <<"5"<<endl;
			output::errorMismatch($2.lineNum);
			exit(0);
		}
		if ($1.type == IntType || $3.type == IntType) {
			$$.type = IntType;
		} else {
			$$.type = ByteType;
		}
		if($1.regist == noRegister || reg_to_string($1.regist) == ""){
			$1.regist = register_alloc->RegisterAlloc();
		}
		if($3.regist == noRegister || reg_to_string($3.regist) == ""){
			$3.regist = register_alloc->RegisterAlloc();
		}
		$$.regist = arithmetic_op($2.oper,$1, $3);
	}
	//TODO: what happens when mixin int and byte
	| Exp BINOPMD Exp {

		$$.lineNum = $1.lineNum;
		if (($1.type != IntType && $1.type != ByteType) || ($3.type != IntType && $3.type != ByteType)) {
			cout << "6\n";
			output::errorMismatch($2.lineNum);
			exit(0);
		}
		if ($1.type == IntType || $3.type == IntType) {
			$$.type = IntType;
		} else {
			$$.type = ByteType;
		}
		if ($2.oper == div_op) {
			checkDivisionByZero($3);
		}
		if($1.regist == noRegister || reg_to_string($1.regist) == ""){
			$1.regist = register_alloc->RegisterAlloc();
		}
		if($3.regist == noRegister || reg_to_string($3.regist) == ""){
			$3.regist = register_alloc->RegisterAlloc();
		}
		$$.regist = arithmetic_op($2.oper,$1, $3);
	}

	| ID {

		$$.str = $1.str;
		$$.lineNum = $1.lineNum;
		// Check if function
		if (scopes->getFunction($1.str) != NULL) {
			$$.type = stringToType((scopes->getFunction($1.str))->getType());
		}
		// Check if variable
		else if (scopes->getVariable($1.str) != NULL) {
				$$.type = stringToType((scopes->getVariable($1.str))->getType());
				$$.regist = loadRegister(scopes->getVariable($1.str));
				VariableEntry* var_entry = scopes->getVariable($1.str);
				if (stringToType(var_entry->getType()) == BoolType){
					reg tmp_register = loadImmediate("1");
					//$$.getTrueList() = CodeBuffer::instance().makelist(CodeBuffer::instance().emit("beq " + reg_to_string($$.regist) + ", " + reg_to_string(tmp_register) + ", "));
					//$$.getFalseList() = CodeBuffer::instance().makelist(CodeBuffer::instance().emit("9 j ")); ///TODO: very critical, are we really need this?
					$$.getTrueList() = CodeBuffer::instance().makelist(beq($$.regist,tmp_register));
					//CodeBuffer::instance().bpatch($$.getTrueList(), CodeBuffer::instance().genLabel());
					//CodeBuffer::instance().emit("9");
					$$.getFalseList() = CodeBuffer::instance().makelist(jmp());		//j9	
					//CodeBuffer::instance().bpatch($$.getFalseList(), CodeBuffer::instance().genLabel());  //TODO: the added line, for checking
					
					register_alloc->freeRegister($$.regist);
					register_alloc->freeRegister(tmp_register);
				}
		}
		else {
			errorUndef($$.lineNum, $$.str);
			exit(0);
		}
	}

	| Call {
		$$ = $1;
		scopes->lineNum = $1.lineNum;
		FunctionEntry* func_entry = scopes->getFunction($$.str);///why is this?
		//TODO: check about errorUndefFunc
		$$.regist = $1.regist;
		if (func_entry->getType() == typeToString(BoolType)){
			reg tmp_reg = loadImmediate("1");
			//$$.getTrueList() = CodeBuffer::instance().makelist(CodeBuffer::instance().emit("beq " + reg_to_string($1.regist) + ", " + reg_to_string(tmp_reg) + ", "));
			//$$.getFalseList() = CodeBuffer::instance().makelist(CodeBuffer::instance().emit("10 j "));
			//$$.getTrueList() = CodeBuffer::instance().makelist(CodeBuffer::instance().emit("beq " + reg_to_string($$.regist) + ", " + reg_to_string(tmp_register) + ", "));
			//$$.getFalseList() = CodeBuffer::instance().makelist(CodeBuffer::instance().emit("9 j ")); ///TODO: very critical, are we really need this?
			$$.getTrueList() = CodeBuffer::instance().makelist(beq($$.regist,tmp_reg));
			//CodeBuffer::instance().emit("10");
			$$.getFalseList() = CodeBuffer::instance().makelist(jmp());
			register_alloc->freeRegister(tmp_reg);
		}
	 }

	| Num {  $$ = $1; scopes->lineNum = $$.lineNum; }

	| STRING {  $$ = $1; scopes->lineNum = $$.lineNum; }

	| TRUE {
		$$ = $1;
		scopes->lineNum = $$.lineNum;
		//$$.getTrueList() = CodeBuffer::instance().makelist(CodeBuffer::instance().emit("j "));
		//CodeBuffer::instance().emit("11");
		$$.getTrueList() = CodeBuffer::instance().makelist(jmp()); //j11
		$$.regist= noRegister;
	 }

	| FALSE {
		$$ = $1;
		scopes->lineNum = $$.lineNum;
		//$$.getFalseList() = CodeBuffer::instance().makelist(CodeBuffer::instance().emit("j 12")); //TODO: DO NOT DELETE THIS!!!
		//CodeBuffer::instance().emit("12");
		$$.getFalseList() = CodeBuffer::instance().makelist(jmp());
		$$.regist= noRegister;
	}

	| NOT Exp {

		if ($2.type != BoolType) {
			//cout << "7\n";
			output::errorMismatch($2.lineNum);
			exit(0);
		}
		$$.type = BoolType;
		$$.lineNum = $2.lineNum;

		$$.getTrueList() = $2.getFalseList();
		$$.getFalseList() = $2.getTrueList();
		$$.regist= noRegister;
	}

	| Exp AND M Exp {

		if ($1.type != BoolType) {
			//cout << "8\n";
			output::errorMismatch($1.lineNum);
			exit(0);
		}
		if ($4.type != BoolType) {
			cout << "9\n";
			output::errorMismatch($4.lineNum);
			exit(0);
		}
		$$.lineNum = $1.lineNum;
		$$.type = BoolType;

		CodeBuffer::instance().bpatch($1.getTrueList(), $3.str);
		$$.getFalseList() = CodeBuffer::instance().merge($1.getFalseList(), $4.getFalseList());
		$$.getTrueList() = $4.getTrueList();
		$$.regist= noRegister;

		register_alloc->freeRegister($1.regist);
		register_alloc->freeRegister($4.regist);
	}

	| Exp OR M Exp {

		if ($1.type != BoolType) {
			cout << "10\n";
			output::errorMismatch($1.lineNum);
			exit(0);
		}
		if ($4.type != BoolType) {
			cout << "11\n";
			output::errorMismatch($4.lineNum);
			exit(0);
		}
		$$.lineNum = $1.lineNum;
		$$.type = BoolType;

		CodeBuffer::instance().bpatch($1.getFalseList(), $3.str);
		$$.getFalseList() = $4.getFalseList();
		$$.getTrueList() = CodeBuffer::instance().merge($1.getTrueList(), $4.getTrueList());
		
		$$.regist= noRegister;

		register_alloc->freeRegister($1.regist);
		register_alloc->freeRegister($4.regist);
	}

	| Exp RELOP Exp {

		if (($1.type != IntType && $1.type != ByteType)||($3.type != IntType && $3.type != ByteType)) {
			//both must be numbers
			cout << "12\n";
			output::errorMismatch($1.lineNum);
			exit(0);
		}
		$$.lineNum = $1.lineNum;
		$$.type = BoolType;

		//int r1 = 0;
		//int r2 = 0;
		if ($1.regist == noRegister) {
            $1.regist = loadImmediate($1.str);
            //r1 = 1;
        }
        if ($3.regist == noRegister || reg_to_string($3.regist) == "") {
            $3.regist = loadImmediate($3.str);
            //r2 = 1;
        }
        logRelop($2.str, $1.regist, $3.regist, $$.getTrueList(), $$.getFalseList());
		register_alloc->freeRegister($1.regist);
		register_alloc->freeRegister($3.regist);
		$$.regist= noRegister;
	}
;


Num: NUM {

	$$ = $1;
	scopes->lineNum = $1.lineNum;
	}

	| NUM B
	{

		$$ = $1;
		$$.type = ByteType;
		int n = atoi($$.str.c_str());
		if(n < 0 || n > 255){
			errorByteTooLarge(scopes->lineNum, $$.str);
			exit(0);
		}
		$$.lineNum = scopes->lineNum = $1.lineNum;
	}
;

M: { // that's M marker
	$$ = StackType();
	$$.str = CodeBuffer::instance().genLabel();
}

N: { // that's N marker
	$$ = StackType();
	//$$.getNextList() = CodeBuffer::instance().makelist(CodeBuffer::instance().emit("j "));
	//CodeBuffer::instance().emit("13");
	$$.getNextList()= CodeBuffer::instance().makelist(jmp()); //j13
}

%%

int main()
{
	startingText();
	yyparse();
	endingText();
	scopes->popScope();
	delete scopes;
	delete register_alloc;
	CodeBuffer::instance().printDataBuffer();
	CodeBuffer::instance().printCodeBuffer();
	return 0;
}

void yyerror(const char *)
{
	//errorSyn(scopes->lineNum);
	errorSyn(yylineno);
	exit(0);
}